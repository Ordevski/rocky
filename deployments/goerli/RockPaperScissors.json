{
  "address": "0xAB9E8cA01f89eaCeB62e18bb362b6759F5a59FC9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "counter",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountReserved",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RockPaperScissors__CannotAfford",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "boldGuy",
          "type": "address"
        }
      ],
      "name": "RockPaperScissors__ChallengeCannotBeAccepted",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "boldGuy",
          "type": "address"
        }
      ],
      "name": "RockPaperScissors__ChallengeCannotBeClosed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "boldGuy",
          "type": "address"
        }
      ],
      "name": "RockPaperScissors__ChallengeDoesNotExist",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "RockPaperScissors__UnreserveFundsToWithdrawAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "boldGuy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "RockPaperScissors__WithdrawAmountCannotExceedDeposit",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        }
      ],
      "name": "RockPaperScissors__WithdrawFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "hand",
          "type": "uint256"
        }
      ],
      "name": "ChallengeAccepted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "closer",
          "type": "address"
        }
      ],
      "name": "ChallengeClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "opponent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "hand",
          "type": "uint256"
        }
      ],
      "name": "ChallengeOpened",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "hand",
          "type": "uint256"
        }
      ],
      "name": "ChallengedPlaysHand",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositMade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalMade",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CHALLENGE_OPEN_TAX_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_BET_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_DEPOSIT_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hand",
          "type": "uint256"
        }
      ],
      "name": "acceptChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "closeChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        },
        {
          "internalType": "enum RockPaperScissors.Hand",
          "name": "challengerHand",
          "type": "uint8"
        },
        {
          "internalType": "enum RockPaperScissors.Hand",
          "name": "challengedHand",
          "type": "uint8"
        }
      ],
      "name": "gameCommenced",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getAmountActive",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "getChallengeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "getDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEthAmountOfTax",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "challengeId",
          "type": "uint256"
        }
      ],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "opponent",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "enum RockPaperScissors.Hand",
          "name": "hand",
          "type": "uint8"
        }
      ],
      "name": "openChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registerAndDeposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8b5f98fac4f949a19a017c06270bae2e1e51ecf7b53b16d5cf4e57b6de319bf0",
  "receipt": {
    "to": null,
    "from": "0xbB74f8AF34eBb59Bbd401161ee52ee348aB91D9F",
    "contractAddress": "0xAB9E8cA01f89eaCeB62e18bb362b6759F5a59FC9",
    "transactionIndex": 6,
    "gasUsed": "1910193",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xfaaf329a7a85807ba0bba4310fa5c73dd02c501dc639baa88ded2aa85ee1899b",
    "transactionHash": "0x8b5f98fac4f949a19a017c06270bae2e1e51ecf7b53b16d5cf4e57b6de319bf0",
    "logs": [],
    "blockNumber": 9798681,
    "cumulativeGasUsed": "2206014",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0",
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 2,
  "solcInputHash": "29879bbd51be2526469365c7b3d2a132",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"counter\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountReserved\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RockPaperScissors__CannotAfford\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"boldGuy\",\"type\":\"address\"}],\"name\":\"RockPaperScissors__ChallengeCannotBeAccepted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"boldGuy\",\"type\":\"address\"}],\"name\":\"RockPaperScissors__ChallengeCannotBeClosed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"boldGuy\",\"type\":\"address\"}],\"name\":\"RockPaperScissors__ChallengeDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"RockPaperScissors__UnreserveFundsToWithdrawAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"boldGuy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"RockPaperScissors__WithdrawAmountCannotExceedDeposit\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"}],\"name\":\"RockPaperScissors__WithdrawFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hand\",\"type\":\"uint256\"}],\"name\":\"ChallengeAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"closer\",\"type\":\"address\"}],\"name\":\"ChallengeClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"opponent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hand\",\"type\":\"uint256\"}],\"name\":\"ChallengeOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hand\",\"type\":\"uint256\"}],\"name\":\"ChallengedPlaysHand\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositMade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalMade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHALLENGE_OPEN_TAX_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_BET_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_DEPOSIT_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hand\",\"type\":\"uint256\"}],\"name\":\"acceptChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"closeChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"},{\"internalType\":\"enum RockPaperScissors.Hand\",\"name\":\"challengerHand\",\"type\":\"uint8\"},{\"internalType\":\"enum RockPaperScissors.Hand\",\"name\":\"challengedHand\",\"type\":\"uint8\"}],\"name\":\"gameCommenced\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getAmountActive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"getChallengeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEthAmountOfTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"challengeId\",\"type\":\"uint256\"}],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"opponent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"enum RockPaperScissors.Hand\",\"name\":\"hand\",\"type\":\"uint8\"}],\"name\":\"openChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registerAndDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RockPaperScissors.sol\":\"RockPaperScissors\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"contracts/Convertor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary Convertor {\\n    function getPrice(\\n        AggregatorV3Interface aggregator\\n    ) internal view returns (uint256) {\\n        (, int256 answer, , , ) = aggregator.latestRoundData();\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface aggregator\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(aggregator);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n\\n        return ethAmountInUsd;\\n    }\\n\\n    function getEthAmount(\\n        uint256 usdAmount,\\n        AggregatorV3Interface aggregator\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(aggregator);\\n\\n        uint256 ethAmount = (usdAmount * 1000000000000000000) / ethPrice;\\n        return ethAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x3d9116c0394baefb598a24e14ed8fccbe5396ff0492ffaa4c5f28e96ade09078\",\"license\":\"MIT\"},\"contracts/RockPaperScissors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Convertor.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nerror RockPaperScissors__CannotAfford(\\n    uint256 deposit,\\n    uint256 amountReserved,\\n    address player\\n);\\nerror RockPaperScissors__ChallengeCannotBeClosed(\\n    uint256 challengeId,\\n    address boldGuy\\n);\\nerror RockPaperScissors__ChallengeDoesNotExist(\\n    uint256 challengeId,\\n    address boldGuy\\n);\\nerror RockPaperScissors__ChallengeCannotBeAccepted(\\n    uint256 challengeId,\\n    address boldGuy\\n);\\nerror RockPaperScissors__WithdrawAmountCannotExceedDeposit(\\n    address boldGuy,\\n    uint256 depositAmount,\\n    uint256 withdrawAmount\\n);\\nerror RockPaperScissors__UnreserveFundsToWithdrawAmount(\\n    address withdrawer,\\n    uint256 withdrawAmount\\n);\\nerror RockPaperScissors__WithdrawFailed(address withdrawer);\\n\\ncontract RockPaperScissors is ReentrancyGuard {\\n    enum Hand {\\n        Empty,\\n        Rock,\\n        Paper,\\n        Scissors\\n    }\\n\\n    enum Outcome {\\n        None,\\n        Draw,\\n        Challenger,\\n        Opponent\\n    }\\n\\n    using Convertor for uint256;\\n\\n    uint256 public constant MINIMUM_BET_USD = 5;\\n    uint256 public constant MINIMUM_DEPOSIT_USD = 5;\\n    uint256 public constant CHALLENGE_OPEN_TAX_USD = 1; // change this\\n\\n    uint256 private challengeCounter;\\n    AggregatorV3Interface private aggregator;\\n\\n    mapping(address => uint256) private deposit;\\n    mapping(address => uint256) private reservedFunds;\\n    mapping(uint256 => address[]) private challengeIdToPlayers;\\n    mapping(uint256 => uint256) private challengeIdToAmount;\\n\\n    event DepositMade(address indexed depositor, uint256 amount);\\n\\n    event WithdrawalMade(address indexed withdrawer, uint256 amount);\\n\\n    // possibly add a slot for the opponent hand and fill it out later\\n    event ChallengeOpened(\\n        uint256 indexed challengeId,\\n        address indexed challenger,\\n        address indexed opponent,\\n        uint256 amount,\\n        uint256 hand\\n    );\\n\\n    event ChallengeClosed(uint256 challengeId, address closer);\\n\\n    event ChallengeAccepted(uint256 challengeId, uint256 hand);\\n\\n    event ChallengedPlaysHand(uint256 challengeId, uint256 hand);\\n\\n    modifier isAmountAboveMinimum(uint256 amount, uint256 givenMinimum) {\\n        if (amount.getConversionRate(aggregator) < givenMinimum) {\\n            revert(\\\"Not enough ETH.\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier canAfford(uint256 amount) {\\n        uint256 fundsReserved = getAmountActive(msg.sender);\\n        uint256 depositMade = getDeposit(msg.sender);\\n\\n        if (fundsReserved + amount > depositMade) {\\n            revert RockPaperScissors__CannotAfford(\\n                depositMade,\\n                fundsReserved + amount,\\n                msg.sender\\n            );\\n        }\\n        _;\\n    }\\n\\n    modifier challengeExists(uint256 challengeId) {\\n        if ((getPlayers(challengeId)).length == 0) {\\n            revert RockPaperScissors__ChallengeDoesNotExist(\\n                challengeId,\\n                msg.sender\\n            );\\n        }\\n        _;\\n    }\\n\\n    constructor(uint256 counter, address priceFeed) {\\n        challengeCounter = counter;\\n        aggregator = AggregatorV3Interface(priceFeed);\\n    }\\n\\n    function registerAndDeposit()\\n        public\\n        payable\\n        nonReentrant\\n        isAmountAboveMinimum(msg.value, MINIMUM_DEPOSIT_USD)\\n    {\\n        deposit[msg.sender] = getDeposit(msg.sender) + msg.value;\\n\\n        emit DepositMade(msg.sender, msg.value);\\n    }\\n\\n    function openChallenge(\\n        address opponent,\\n        uint256 amount,\\n        Hand hand\\n    ) public isAmountAboveMinimum(amount, MINIMUM_BET_USD) canAfford(amount) {\\n        challengeIdToAmount[challengeCounter] = amount;\\n        challengeIdToPlayers[challengeCounter] = [msg.sender, opponent];\\n\\n        reservedFunds[msg.sender] = getAmountActive(msg.sender) + amount;\\n\\n        emit ChallengeOpened(\\n            challengeCounter,\\n            msg.sender,\\n            opponent,\\n            amount,\\n            uint(hand)\\n        );\\n\\n        challengeCounter++;\\n    }\\n\\n    function acceptChallenge(\\n        uint256 challengeId,\\n        uint256 hand\\n    )\\n        public\\n        challengeExists(challengeId)\\n        canAfford(challengeIdToAmount[challengeId])\\n    {\\n        address challenged = challengeIdToPlayers[challengeId][1];\\n        uint256 amount = challengeIdToAmount[challengeId];\\n\\n        if (msg.sender != challenged) {\\n            revert RockPaperScissors__ChallengeCannotBeAccepted(\\n                challengeId,\\n                msg.sender\\n            );\\n        }\\n\\n        reservedFunds[challenged] = getAmountActive(challenged) + amount;\\n\\n        emit ChallengeAccepted(challengeId, hand);\\n    }\\n\\n    function closeChallenge(\\n        uint256 challengeId\\n    ) public challengeExists(challengeId) {\\n        address[] memory players = challengeIdToPlayers[challengeId];\\n\\n        if (msg.sender != players[0] && msg.sender != players[1]) {\\n            revert RockPaperScissors__ChallengeCannotBeClosed(\\n                challengeId,\\n                msg.sender\\n            );\\n        }\\n        address challenger = players[0];\\n\\n        reservedFunds[challenger] =\\n            getAmountActive(challenger) -\\n            challengeIdToAmount[challengeId];\\n        deposit[challenger] = getDeposit(challenger) - getEthAmountOfTax(); // tax\\n\\n        emit ChallengeClosed(challengeId, msg.sender);\\n        delete challengeIdToPlayers[challengeId]; // ?\\n    }\\n\\n    function gameCommenced(\\n        uint256 challengeId,\\n        Hand challengerHand,\\n        Hand challengedHand\\n    ) public challengeExists(challengeId) {\\n        uint256 amount = challengeIdToAmount[challengeId];\\n        address challenger = challengeIdToPlayers[challengeId][0];\\n        address challenged = challengeIdToPlayers[challengeId][1];\\n\\n        Outcome outcome = compareHands(challengerHand, challengedHand);\\n\\n        if (outcome == Outcome.Challenger) {\\n            allocateWinnings(challenger, challenged, amount);\\n        } else if (outcome == Outcome.Opponent) {\\n            allocateWinnings(challenged, challenger, amount);\\n        }\\n\\n        reservedFunds[challenger] = getAmountActive(challenger) - amount;\\n        reservedFunds[challenged] = getAmountActive(challenged) - amount;\\n\\n        delete challengeIdToPlayers[challengeId];\\n        delete challengeIdToAmount[challengeId];\\n    }\\n\\n    function compareHands(\\n        Hand challengerHand,\\n        Hand opponentHand\\n    ) private pure returns (Outcome) {\\n        if (challengerHand == opponentHand) {\\n            return Outcome.Draw;\\n        } else if (\\n            (challengerHand == Hand.Rock && opponentHand == Hand.Paper) ||\\n            (challengerHand == Hand.Scissors && opponentHand == Hand.Rock) ||\\n            (challengerHand == Hand.Paper && opponentHand == Hand.Scissors)\\n        ) {\\n            return Outcome.Opponent;\\n        } else {\\n            return Outcome.Challenger;\\n        }\\n    }\\n\\n    function allocateWinnings(\\n        address winner,\\n        address loser,\\n        uint256 amount\\n    ) private {\\n        deposit[winner] = deposit[winner] + ((amount * 90) / 100);\\n        deposit[loser] = deposit[loser] - amount;\\n    }\\n\\n    function withdraw(uint256 withdrawAmount) public payable nonReentrant {\\n        uint256 depositMade = deposit[msg.sender];\\n\\n        if (withdrawAmount > depositMade) {\\n            revert RockPaperScissors__WithdrawAmountCannotExceedDeposit(\\n                msg.sender,\\n                depositMade,\\n                withdrawAmount\\n            );\\n        }\\n        if (withdrawAmount > depositMade - reservedFunds[msg.sender]) {\\n            revert RockPaperScissors__UnreserveFundsToWithdrawAmount(\\n                msg.sender,\\n                withdrawAmount\\n            );\\n        }\\n\\n        deposit[msg.sender] = depositMade - withdrawAmount;\\n        (bool callSuccess, ) = payable(msg.sender).call{value: withdrawAmount}(\\n            \\\"\\\"\\n        );\\n\\n        if (!callSuccess) {\\n            revert RockPaperScissors__WithdrawFailed(msg.sender);\\n        }\\n        emit WithdrawalMade(msg.sender, withdrawAmount);\\n    }\\n\\n    // function challengedPlaysTheirHand(uint256 challengeId, Hand hand) private {\\n    //     emit ChallengedPlaysHand(challengeId, uint(hand));\\n    // }\\n\\n    function getDeposit(address player) public view returns (uint256) {\\n        return deposit[player];\\n    }\\n\\n    function getAmountActive(address player) public view returns (uint256) {\\n        return reservedFunds[player];\\n    }\\n\\n    function getPlayers(\\n        uint256 challengeId\\n    ) public view returns (address[] memory) {\\n        return challengeIdToPlayers[challengeId];\\n    }\\n\\n    function getChallengeAmount(\\n        uint256 challengeId\\n    ) public view returns (uint256) {\\n        return challengeIdToAmount[challengeId];\\n    }\\n\\n    function getEthAmountOfTax() public view returns (uint256) {\\n        return CHALLENGE_OPEN_TAX_USD.getEthAmount(aggregator);\\n    }\\n}\\n\",\"keccak256\":\"0x99b7068a9062fa3e905e233d8030bf31f88e88549563e4eb53676b0bed1ac79e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200224c3803806200224c833981810160405281019062000037919062000134565b60016000819055508160018190555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506200017b565b600080fd5b6000819050919050565b620000a98162000094565b8114620000b557600080fd5b50565b600081519050620000c9816200009e565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000fc82620000cf565b9050919050565b6200010e81620000ef565b81146200011a57600080fd5b50565b6000815190506200012e8162000103565b92915050565b600080604083850312156200014e576200014d6200008f565b5b60006200015e85828601620000b8565b925050602062000171858286016200011d565b9150509250929050565b6120c1806200018b6000396000f3fe6080604052600436106100dd5760003560e01c8063460e20491161007f578063a64634ba11610059578063a64634ba1461027e578063b9d3ec8d146102bb578063bce197bb146102e4578063e1254fba1461030f576100dd565b8063460e2049146101ed57806359808a971461022a578063965e12dc14610253576100dd565b80632c2fc3ab116100bb5780632c2fc3ab146101735780632e1a7d4d1461017d57806332e56852146101995780633d459d57146101c4576100dd565b8063131178ac146100e25780632bbbc93e1461010b5780632c2579a414610136575b600080fd5b3480156100ee57600080fd5b506101096004803603810190610104919061181d565b61034c565b005b34801561011757600080fd5b506101206105a3565b60405161012d919061186c565b60405180910390f35b34801561014257600080fd5b5061015d600480360381019061015891906118e5565b6105a8565b60405161016a919061186c565b60405180910390f35b61017b6105f1565b005b61019760048036038101906101929190611912565b610724565b005b3480156101a557600080fd5b506101ae6109a2565b6040516101bb919061186c565b60405180910390f35b3480156101d057600080fd5b506101eb60048036038101906101e69190611964565b6109a7565b005b3480156101f957600080fd5b50610214600480360381019061020f9190611912565b610c2a565b6040516102219190611a75565b60405180910390f35b34801561023657600080fd5b50610251600480360381019061024c9190611912565b610ccb565b005b34801561025f57600080fd5b50610268610fe0565b604051610275919061186c565b60405180910390f35b34801561028a57600080fd5b506102a560048036038101906102a09190611912565b610fe5565b6040516102b2919061186c565b60405180910390f35b3480156102c757600080fd5b506102e260048036038101906102dd9190611a97565b611002565b005b3480156102f057600080fd5b506102f9611296565b604051610306919061186c565b60405180910390f35b34801561031b57600080fd5b50610336600480360381019061033191906118e5565b6112d3565b604051610343919061186c565b60405180910390f35b81600061035882610c2a565b510361039d5780336040517f8dead017000000000000000000000000000000000000000000000000000000008152600401610394929190611af9565b60405180910390fd5b600660008481526020019081526020016000205460006103bc336105a8565b905060006103c9336112d3565b90508083836103d89190611b51565b111561042a578083836103eb9190611b51565b336040517fbe20b76100000000000000000000000000000000000000000000000000000000815260040161042193929190611b85565b60405180910390fd5b60006005600088815260200190815260200160002060018154811061045257610451611bbc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600660008981526020019081526020016000205490508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105095787336040517f5e281991000000000000000000000000000000000000000000000000000000008152600401610500929190611af9565b60405180910390fd5b80610513836105a8565b61051d9190611b51565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f0e3e71918165b205241b092b9121bb9b847e17f66b161239b21639fa61237ed98888604051610591929190611beb565b60405180910390a15050505050505050565b600581565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6105f961131c565b34600580610632600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168461136b90919063ffffffff16565b1015610673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066a90611c71565b60405180910390fd5b3461067d336112d3565b6106879190611b51565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fd15c9547ea5c06670c0010ce19bc32d54682a4b3801ece7f3ab0c3f17106b4bb34604051610710919061186c565b60405180910390a250506107226113a7565b565b61072c61131c565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808211156107b9573381836040517fcb622a420000000000000000000000000000000000000000000000000000000081526004016107b093929190611c91565b60405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054816108049190611cc8565b82111561084a5733826040517fb9a37a6f000000000000000000000000000000000000000000000000000000008152600401610841929190611cfc565b60405180910390fd5b81816108569190611cc8565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff16836040516108bf90611d56565b60006040518083038185875af1925050503d80600081146108fc576040519150601f19603f3d011682016040523d82523d6000602084013e610901565b606091505b505090508061094757336040517f9615051200000000000000000000000000000000000000000000000000000000815260040161093e9190611d6b565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167fbc158bb64f05d6383aea69bbb0b20c1bbf4b7a18f63359c5649b7c39e29d38848460405161098d919061186c565b60405180910390a2505061099f6113a7565b50565b600181565b8260006109b382610c2a565b51036109f85780336040517f8dead0170000000000000000000000000000000000000000000000000000000081526004016109ef929190611af9565b60405180910390fd5b600060066000868152602001908152602001600020549050600060056000878152602001908152602001600020600081548110610a3857610a37611bbc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060056000888152602001908152602001600020600181548110610a8d57610a8c611bbc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000610ac687876113b1565b905060026003811115610adc57610adb611d86565b5b816003811115610aef57610aee611d86565b5b03610b0457610aff838386611514565b610b3c565b600380811115610b1757610b16611d86565b5b816003811115610b2a57610b29611d86565b5b03610b3b57610b3a828486611514565b5b5b83610b46846105a8565b610b509190611cc8565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083610b9d836105a8565b610ba79190611cc8565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600560008981526020019081526020016000206000610c09919061171a565b60066000898152602001908152602001600020600090555050505050505050565b606060056000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610cbf57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c75575b50505050509050919050565b806000610cd782610c2a565b5103610d1c5780336040517f8dead017000000000000000000000000000000000000000000000000000000008152600401610d13929190611af9565b60405180910390fd5b600060056000848152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610db157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d67575b5050505050905080600081518110610dcc57610dcb611bbc565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610e56575080600181518110610e1e57610e1d611bbc565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610e9a5782336040517f30e16845000000000000000000000000000000000000000000000000000000008152600401610e91929190611af9565b60405180910390fd5b600081600081518110610eb057610eaf611bbc565b5b602002602001015190506006600085815260200190815260200160002054610ed7826105a8565b610ee19190611cc8565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f2c611296565b610f35826112d3565b610f3f9190611cc8565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f7b19521cf3193b7e974dd2af820817c32519d30610bcdfee41f5c7887db5f8348433604051610fb3929190611af9565b60405180910390a1600560008581526020019081526020016000206000610fda919061171a565b50505050565b600581565b600060066000838152602001908152602001600020549050919050565b8160058061103b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168461136b90919063ffffffff16565b101561107c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107390611c71565b60405180910390fd5b836000611088336105a8565b90506000611095336112d3565b90508083836110a49190611b51565b11156110f6578083836110b79190611b51565b336040517fbe20b7610000000000000000000000000000000000000000000000000000000081526004016110ed93929190611b85565b60405180910390fd5b866006600060015481526020019081526020016000208190555060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152506005600060015481526020019081526020016000209060026111a092919061173b565b50866111ab336105a8565b6111b59190611b51565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff166001547fd100251d8b95da1b6ab8c6046a6ac12c64aac36b13ab918c7ab2b12f662ff3b18a8a600381111561125e5761125d611d86565b5b60405161126c929190611beb565b60405180910390a46001600081548092919061128790611db5565b91905055505050505050505050565b60006112ce600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600161164d90919063ffffffff16565b905090565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260005403611361576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135890611e49565b60405180910390fd5b6002600081905550565b60008061137783611689565b90506000670de0b6b3a764000085836113909190611e69565b61139a9190611eda565b9050809250505092915050565b6001600081905550565b60008160038111156113c6576113c5611d86565b5b8360038111156113d9576113d8611d86565b5b036113e7576001905061150e565b600160038111156113fb576113fa611d86565b5b83600381111561140e5761140d611d86565b5b14801561143f57506002600381111561142a57611429611d86565b5b82600381111561143d5761143c611d86565b5b145b8061149d575060038081111561145857611457611d86565b5b83600381111561146b5761146a611d86565b5b14801561149c57506001600381111561148757611486611d86565b5b82600381111561149a57611499611d86565b5b145b5b806114fb5750600260038111156114b7576114b6611d86565b5b8360038111156114ca576114c9611d86565b5b1480156114fa57506003808111156114e5576114e4611d86565b5b8260038111156114f8576114f7611d86565b5b145b5b15611509576003905061150e565b600290505b92915050565b6064605a826115239190611e69565b61152d9190611eda565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115779190611b51565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116059190611cc8565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b60008061165983611689565b9050600081670de0b6b3a7640000866116729190611e69565b61167c9190611eda565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156116d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fb9190611f98565b5050509150506402540be400816117129190612013565b915050919050565b508054600082559060005260206000209081019061173891906117c5565b50565b8280548282559060005260206000209081019282156117b4579160200282015b828111156117b35782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061175b565b5b5090506117c191906117c5565b5090565b5b808211156117de5760008160009055506001016117c6565b5090565b600080fd5b6000819050919050565b6117fa816117e7565b811461180557600080fd5b50565b600081359050611817816117f1565b92915050565b60008060408385031215611834576118336117e2565b5b600061184285828601611808565b925050602061185385828601611808565b9150509250929050565b611866816117e7565b82525050565b6000602082019050611881600083018461185d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118b282611887565b9050919050565b6118c2816118a7565b81146118cd57600080fd5b50565b6000813590506118df816118b9565b92915050565b6000602082840312156118fb576118fa6117e2565b5b6000611909848285016118d0565b91505092915050565b600060208284031215611928576119276117e2565b5b600061193684828501611808565b91505092915050565b6004811061194c57600080fd5b50565b60008135905061195e8161193f565b92915050565b60008060006060848603121561197d5761197c6117e2565b5b600061198b86828701611808565b935050602061199c8682870161194f565b92505060406119ad8682870161194f565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6119ec816118a7565b82525050565b60006119fe83836119e3565b60208301905092915050565b6000602082019050919050565b6000611a22826119b7565b611a2c81856119c2565b9350611a37836119d3565b8060005b83811015611a68578151611a4f88826119f2565b9750611a5a83611a0a565b925050600181019050611a3b565b5085935050505092915050565b60006020820190508181036000830152611a8f8184611a17565b905092915050565b600080600060608486031215611ab057611aaf6117e2565b5b6000611abe868287016118d0565b9350506020611acf86828701611808565b9250506040611ae08682870161194f565b9150509250925092565b611af3816118a7565b82525050565b6000604082019050611b0e600083018561185d565b611b1b6020830184611aea565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b5c826117e7565b9150611b67836117e7565b9250828201905080821115611b7f57611b7e611b22565b5b92915050565b6000606082019050611b9a600083018661185d565b611ba7602083018561185d565b611bb46040830184611aea565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050611c00600083018561185d565b611c0d602083018461185d565b9392505050565b600082825260208201905092915050565b7f4e6f7420656e6f756768204554482e0000000000000000000000000000000000600082015250565b6000611c5b600f83611c14565b9150611c6682611c25565b602082019050919050565b60006020820190508181036000830152611c8a81611c4e565b9050919050565b6000606082019050611ca66000830186611aea565b611cb3602083018561185d565b611cc0604083018461185d565b949350505050565b6000611cd3826117e7565b9150611cde836117e7565b9250828203905081811115611cf657611cf5611b22565b5b92915050565b6000604082019050611d116000830185611aea565b611d1e602083018461185d565b9392505050565b600081905092915050565b50565b6000611d40600083611d25565b9150611d4b82611d30565b600082019050919050565b6000611d6182611d33565b9150819050919050565b6000602082019050611d806000830184611aea565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000611dc0826117e7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611df257611df1611b22565b5b600182019050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611e33601f83611c14565b9150611e3e82611dfd565b602082019050919050565b60006020820190508181036000830152611e6281611e26565b9050919050565b6000611e74826117e7565b9150611e7f836117e7565b9250828202611e8d816117e7565b91508282048414831517611ea457611ea3611b22565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611ee5826117e7565b9150611ef0836117e7565b925082611f0057611eff611eab565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b611f2a81611f0b565b8114611f3557600080fd5b50565b600081519050611f4781611f21565b92915050565b6000819050919050565b611f6081611f4d565b8114611f6b57600080fd5b50565b600081519050611f7d81611f57565b92915050565b600081519050611f92816117f1565b92915050565b600080600080600060a08688031215611fb457611fb36117e2565b5b6000611fc288828901611f38565b9550506020611fd388828901611f6e565b9450506040611fe488828901611f83565b9350506060611ff588828901611f83565b925050608061200688828901611f38565b9150509295509295909350565b600061201e82611f4d565b915061202983611f4d565b925082820261203781611f4d565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561206f5761206e611b22565b5b828205841483151761208457612083611b22565b5b509291505056fea26469706673582212203ae3b0bd27aef777b5bbe0c87ff5299b35fafc90856565306ebd79a0d9b265b764736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c8063460e20491161007f578063a64634ba11610059578063a64634ba1461027e578063b9d3ec8d146102bb578063bce197bb146102e4578063e1254fba1461030f576100dd565b8063460e2049146101ed57806359808a971461022a578063965e12dc14610253576100dd565b80632c2fc3ab116100bb5780632c2fc3ab146101735780632e1a7d4d1461017d57806332e56852146101995780633d459d57146101c4576100dd565b8063131178ac146100e25780632bbbc93e1461010b5780632c2579a414610136575b600080fd5b3480156100ee57600080fd5b506101096004803603810190610104919061181d565b61034c565b005b34801561011757600080fd5b506101206105a3565b60405161012d919061186c565b60405180910390f35b34801561014257600080fd5b5061015d600480360381019061015891906118e5565b6105a8565b60405161016a919061186c565b60405180910390f35b61017b6105f1565b005b61019760048036038101906101929190611912565b610724565b005b3480156101a557600080fd5b506101ae6109a2565b6040516101bb919061186c565b60405180910390f35b3480156101d057600080fd5b506101eb60048036038101906101e69190611964565b6109a7565b005b3480156101f957600080fd5b50610214600480360381019061020f9190611912565b610c2a565b6040516102219190611a75565b60405180910390f35b34801561023657600080fd5b50610251600480360381019061024c9190611912565b610ccb565b005b34801561025f57600080fd5b50610268610fe0565b604051610275919061186c565b60405180910390f35b34801561028a57600080fd5b506102a560048036038101906102a09190611912565b610fe5565b6040516102b2919061186c565b60405180910390f35b3480156102c757600080fd5b506102e260048036038101906102dd9190611a97565b611002565b005b3480156102f057600080fd5b506102f9611296565b604051610306919061186c565b60405180910390f35b34801561031b57600080fd5b50610336600480360381019061033191906118e5565b6112d3565b604051610343919061186c565b60405180910390f35b81600061035882610c2a565b510361039d5780336040517f8dead017000000000000000000000000000000000000000000000000000000008152600401610394929190611af9565b60405180910390fd5b600660008481526020019081526020016000205460006103bc336105a8565b905060006103c9336112d3565b90508083836103d89190611b51565b111561042a578083836103eb9190611b51565b336040517fbe20b76100000000000000000000000000000000000000000000000000000000815260040161042193929190611b85565b60405180910390fd5b60006005600088815260200190815260200160002060018154811061045257610451611bbc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600660008981526020019081526020016000205490508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105095787336040517f5e281991000000000000000000000000000000000000000000000000000000008152600401610500929190611af9565b60405180910390fd5b80610513836105a8565b61051d9190611b51565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f0e3e71918165b205241b092b9121bb9b847e17f66b161239b21639fa61237ed98888604051610591929190611beb565b60405180910390a15050505050505050565b600581565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6105f961131c565b34600580610632600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168461136b90919063ffffffff16565b1015610673576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066a90611c71565b60405180910390fd5b3461067d336112d3565b6106879190611b51565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fd15c9547ea5c06670c0010ce19bc32d54682a4b3801ece7f3ab0c3f17106b4bb34604051610710919061186c565b60405180910390a250506107226113a7565b565b61072c61131c565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050808211156107b9573381836040517fcb622a420000000000000000000000000000000000000000000000000000000081526004016107b093929190611c91565b60405180910390fd5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054816108049190611cc8565b82111561084a5733826040517fb9a37a6f000000000000000000000000000000000000000000000000000000008152600401610841929190611cfc565b60405180910390fd5b81816108569190611cc8565b600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060003373ffffffffffffffffffffffffffffffffffffffff16836040516108bf90611d56565b60006040518083038185875af1925050503d80600081146108fc576040519150601f19603f3d011682016040523d82523d6000602084013e610901565b606091505b505090508061094757336040517f9615051200000000000000000000000000000000000000000000000000000000815260040161093e9190611d6b565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167fbc158bb64f05d6383aea69bbb0b20c1bbf4b7a18f63359c5649b7c39e29d38848460405161098d919061186c565b60405180910390a2505061099f6113a7565b50565b600181565b8260006109b382610c2a565b51036109f85780336040517f8dead0170000000000000000000000000000000000000000000000000000000081526004016109ef929190611af9565b60405180910390fd5b600060066000868152602001908152602001600020549050600060056000878152602001908152602001600020600081548110610a3857610a37611bbc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060056000888152602001908152602001600020600181548110610a8d57610a8c611bbc565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000610ac687876113b1565b905060026003811115610adc57610adb611d86565b5b816003811115610aef57610aee611d86565b5b03610b0457610aff838386611514565b610b3c565b600380811115610b1757610b16611d86565b5b816003811115610b2a57610b29611d86565b5b03610b3b57610b3a828486611514565b5b5b83610b46846105a8565b610b509190611cc8565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083610b9d836105a8565b610ba79190611cc8565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600560008981526020019081526020016000206000610c09919061171a565b60066000898152602001908152602001600020600090555050505050505050565b606060056000838152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610cbf57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c75575b50505050509050919050565b806000610cd782610c2a565b5103610d1c5780336040517f8dead017000000000000000000000000000000000000000000000000000000008152600401610d13929190611af9565b60405180910390fd5b600060056000848152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015610db157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d67575b5050505050905080600081518110610dcc57610dcb611bbc565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614158015610e56575080600181518110610e1e57610e1d611bbc565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614155b15610e9a5782336040517f30e16845000000000000000000000000000000000000000000000000000000008152600401610e91929190611af9565b60405180910390fd5b600081600081518110610eb057610eaf611bbc565b5b602002602001015190506006600085815260200190815260200160002054610ed7826105a8565b610ee19190611cc8565b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610f2c611296565b610f35826112d3565b610f3f9190611cc8565b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507f7b19521cf3193b7e974dd2af820817c32519d30610bcdfee41f5c7887db5f8348433604051610fb3929190611af9565b60405180910390a1600560008581526020019081526020016000206000610fda919061171a565b50505050565b600581565b600060066000838152602001908152602001600020549050919050565b8160058061103b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168461136b90919063ffffffff16565b101561107c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107390611c71565b60405180910390fd5b836000611088336105a8565b90506000611095336112d3565b90508083836110a49190611b51565b11156110f6578083836110b79190611b51565b336040517fbe20b7610000000000000000000000000000000000000000000000000000000081526004016110ed93929190611b85565b60405180910390fd5b866006600060015481526020019081526020016000208190555060405180604001604052803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152506005600060015481526020019081526020016000209060026111a092919061173b565b50866111ab336105a8565b6111b59190611b51565b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508773ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff166001547fd100251d8b95da1b6ab8c6046a6ac12c64aac36b13ab918c7ab2b12f662ff3b18a8a600381111561125e5761125d611d86565b5b60405161126c929190611beb565b60405180910390a46001600081548092919061128790611db5565b91905055505050505050505050565b60006112ce600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600161164d90919063ffffffff16565b905090565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260005403611361576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135890611e49565b60405180910390fd5b6002600081905550565b60008061137783611689565b90506000670de0b6b3a764000085836113909190611e69565b61139a9190611eda565b9050809250505092915050565b6001600081905550565b60008160038111156113c6576113c5611d86565b5b8360038111156113d9576113d8611d86565b5b036113e7576001905061150e565b600160038111156113fb576113fa611d86565b5b83600381111561140e5761140d611d86565b5b14801561143f57506002600381111561142a57611429611d86565b5b82600381111561143d5761143c611d86565b5b145b8061149d575060038081111561145857611457611d86565b5b83600381111561146b5761146a611d86565b5b14801561149c57506001600381111561148757611486611d86565b5b82600381111561149a57611499611d86565b5b145b5b806114fb5750600260038111156114b7576114b6611d86565b5b8360038111156114ca576114c9611d86565b5b1480156114fa57506003808111156114e5576114e4611d86565b5b8260038111156114f8576114f7611d86565b5b145b5b15611509576003905061150e565b600290505b92915050565b6064605a826115239190611e69565b61152d9190611eda565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546115779190611b51565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546116059190611cc8565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b60008061165983611689565b9050600081670de0b6b3a7640000866116729190611e69565b61167c9190611eda565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156116d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fb9190611f98565b5050509150506402540be400816117129190612013565b915050919050565b508054600082559060005260206000209081019061173891906117c5565b50565b8280548282559060005260206000209081019282156117b4579160200282015b828111156117b35782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061175b565b5b5090506117c191906117c5565b5090565b5b808211156117de5760008160009055506001016117c6565b5090565b600080fd5b6000819050919050565b6117fa816117e7565b811461180557600080fd5b50565b600081359050611817816117f1565b92915050565b60008060408385031215611834576118336117e2565b5b600061184285828601611808565b925050602061185385828601611808565b9150509250929050565b611866816117e7565b82525050565b6000602082019050611881600083018461185d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118b282611887565b9050919050565b6118c2816118a7565b81146118cd57600080fd5b50565b6000813590506118df816118b9565b92915050565b6000602082840312156118fb576118fa6117e2565b5b6000611909848285016118d0565b91505092915050565b600060208284031215611928576119276117e2565b5b600061193684828501611808565b91505092915050565b6004811061194c57600080fd5b50565b60008135905061195e8161193f565b92915050565b60008060006060848603121561197d5761197c6117e2565b5b600061198b86828701611808565b935050602061199c8682870161194f565b92505060406119ad8682870161194f565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6119ec816118a7565b82525050565b60006119fe83836119e3565b60208301905092915050565b6000602082019050919050565b6000611a22826119b7565b611a2c81856119c2565b9350611a37836119d3565b8060005b83811015611a68578151611a4f88826119f2565b9750611a5a83611a0a565b925050600181019050611a3b565b5085935050505092915050565b60006020820190508181036000830152611a8f8184611a17565b905092915050565b600080600060608486031215611ab057611aaf6117e2565b5b6000611abe868287016118d0565b9350506020611acf86828701611808565b9250506040611ae08682870161194f565b9150509250925092565b611af3816118a7565b82525050565b6000604082019050611b0e600083018561185d565b611b1b6020830184611aea565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b5c826117e7565b9150611b67836117e7565b9250828201905080821115611b7f57611b7e611b22565b5b92915050565b6000606082019050611b9a600083018661185d565b611ba7602083018561185d565b611bb46040830184611aea565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000604082019050611c00600083018561185d565b611c0d602083018461185d565b9392505050565b600082825260208201905092915050565b7f4e6f7420656e6f756768204554482e0000000000000000000000000000000000600082015250565b6000611c5b600f83611c14565b9150611c6682611c25565b602082019050919050565b60006020820190508181036000830152611c8a81611c4e565b9050919050565b6000606082019050611ca66000830186611aea565b611cb3602083018561185d565b611cc0604083018461185d565b949350505050565b6000611cd3826117e7565b9150611cde836117e7565b9250828203905081811115611cf657611cf5611b22565b5b92915050565b6000604082019050611d116000830185611aea565b611d1e602083018461185d565b9392505050565b600081905092915050565b50565b6000611d40600083611d25565b9150611d4b82611d30565b600082019050919050565b6000611d6182611d33565b9150819050919050565b6000602082019050611d806000830184611aea565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6000611dc0826117e7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611df257611df1611b22565b5b600182019050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611e33601f83611c14565b9150611e3e82611dfd565b602082019050919050565b60006020820190508181036000830152611e6281611e26565b9050919050565b6000611e74826117e7565b9150611e7f836117e7565b9250828202611e8d816117e7565b91508282048414831517611ea457611ea3611b22565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611ee5826117e7565b9150611ef0836117e7565b925082611f0057611eff611eab565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b611f2a81611f0b565b8114611f3557600080fd5b50565b600081519050611f4781611f21565b92915050565b6000819050919050565b611f6081611f4d565b8114611f6b57600080fd5b50565b600081519050611f7d81611f57565b92915050565b600081519050611f92816117f1565b92915050565b600080600080600060a08688031215611fb457611fb36117e2565b5b6000611fc288828901611f38565b9550506020611fd388828901611f6e565b9450506040611fe488828901611f83565b9350506060611ff588828901611f83565b925050608061200688828901611f38565b9150509295509295909350565b600061201e82611f4d565b915061202983611f4d565b925082820261203781611f4d565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561206f5761206e611b22565b5b828205841483151761208457612083611b22565b5b509291505056fea26469706673582212203ae3b0bd27aef777b5bbe0c87ff5299b35fafc90856565306ebd79a0d9b265b764736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 56,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 256,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "challengeCounter",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 259,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "aggregator",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 263,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "deposit",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 267,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "reservedFunds",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 272,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "challengeIdToPlayers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 276,
        "contract": "contracts/RockPaperScissors.sol:RockPaperScissors",
        "label": "challengeIdToAmount",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}