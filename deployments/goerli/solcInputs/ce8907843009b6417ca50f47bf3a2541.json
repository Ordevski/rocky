{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/RockPaperScissors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nerror RockPaperScissors__TotalChallengesAmountExceedsDeposit(\n    uint256 deposit,\n    uint256 totalAmount\n);\nerror RockPaperScissors__ReachedLimitOfChallengesOpened(\n    uint256 numberOfChallengesOpened,\n    address challenger\n);\nerror RockPaperScissors__WithdrawAmountCannotExceedDepositAmount(\n    address boldGuy,\n    uint256 depositAmount,\n    uint256 withdrawAmount\n);\nerror RockPaperScissors__WithdrawFailed(address withdrawer);\n\ncontract RockPaperScissors is ReentrancyGuard {\n    enum Hand {\n        Empty,\n        Rock,\n        Paper,\n        Scissors\n    }\n\n    enum Outcome {\n        None,\n        Draw,\n        Challenger,\n        Opponent\n    }\n\n    struct Challenge {\n        address challenger;\n        address challenged;\n        uint256 amount;\n        Hand challengerHand;\n    }\n\n    struct Game {\n        address challenger;\n        address challenged;\n        uint256 amount;\n        Hand challengerHand; // ?\n        Hand challengedHand; // ?\n        Outcome Outcome;\n    }\n\n    uint256 public constant MINIMUM_BET = 1e16;\n    uint256 public constant MAXIMUM_ACTIVE_CHALLENGES = 3;\n\n    mapping(address => uint256) private numberOfChallengesOpened; // protection of abusing this\n    mapping(address => uint256) private totalChallengeAmount;\n    mapping(address => uint256) private deposit;\n\n    event DepositMade(address indexed depositor, uint256 amount);\n\n    event WithdrawalMade(address indexed withdrawer, uint256 amount);\n\n    event ChallengeOpened(\n        address indexed challenger,\n        address indexed opponent,\n        uint256 amount,\n        uint256 hand\n    );\n\n    event ChallengeClosed(address indexed challenger, address indexed opponent);\n\n    event GameOpened(\n        address indexed challenged,\n        address indexed challenger,\n        uint256 amount,\n        uint256 challengerHand,\n        uint256 challengedHand\n    );\n\n    event ChallengedPlaysHand(address indexed challenged, uint256 hand);\n\n    modifier isAmountAboveMinimum(uint256 amount) {\n        require(amount >= MINIMUM_BET);\n        _;\n    }\n\n    modifier canAfford(uint256 amount) {\n        uint256 challengerTotalAmount = totalChallengeAmount[msg.sender];\n        uint256 activeDeposit = deposit[msg.sender];\n\n        if (challengerTotalAmount + amount > activeDeposit) {\n            revert RockPaperScissors__TotalChallengesAmountExceedsDeposit(\n                activeDeposit,\n                challengerTotalAmount + amount\n            );\n        }\n        _;\n    }\n\n    function registerAndDeposit(\n        uint256 depositAmount\n    ) public payable nonReentrant {\n        deposit[msg.sender] = deposit[msg.sender] + depositAmount;\n\n        emit DepositMade(msg.sender, depositAmount);\n    }\n\n    function openChallenge(\n        address opponent,\n        uint256 amount,\n        Hand hand\n    ) public isAmountAboveMinimum(amount) canAfford(amount) {\n        uint256 challengesOpened = numberOfChallengesOpened[msg.sender];\n        if (challengesOpened == MAXIMUM_ACTIVE_CHALLENGES) {\n            revert RockPaperScissors__ReachedLimitOfChallengesOpened(\n                challengesOpened,\n                msg.sender\n            );\n        }\n\n        numberOfChallengesOpened[msg.sender] = challengesOpened + 1;\n        totalChallengeAmount[msg.sender] =\n            totalChallengeAmount[msg.sender] +\n            amount;\n\n        emit ChallengeOpened(msg.sender, opponent, amount, uint(hand));\n    }\n\n    function acceptChallenge(\n        address challenged,\n        address /*challenger*/,\n        uint256 amount\n    ) public canAfford(amount) {\n        totalChallengeAmount[challenged] =\n            totalChallengeAmount[challenged] +\n            amount;\n\n        // check if you can use msg.sender instead\n\n        // emit GameOpened(msg.sender, challenger, amount, ); or just use the already existing one for challenge\n        // this needs to reserve funds from both players? didnt we alreeady limit their use of the deposit\n    }\n\n    function closeChallenge(address challenger, uint256 amount) public {\n        numberOfChallengesOpened[challenger] =\n            numberOfChallengesOpened[challenger] -\n            1;\n        totalChallengeAmount[challenger] =\n            totalChallengeAmount[challenger] +\n            amount;\n    }\n\n    function gameCommenced(\n        address challenger,\n        address challenged,\n        Hand challengerHand,\n        Hand challengedHand,\n        uint256 amount\n    ) public {\n        Outcome outcome = compareHands(challengerHand, challengedHand);\n\n        if (outcome == Outcome.Challenger) {\n            allocateWinnings(challenger, challenged, amount);\n        } else if (outcome == Outcome.Opponent) {\n            allocateWinnings(challenged, challenger, amount);\n        }\n\n        numberOfChallengesOpened[challenger] =\n            numberOfChallengesOpened[challenger] -\n            1;\n        totalChallengeAmount[challenger] =\n            totalChallengeAmount[challenger] -\n            amount;\n        totalChallengeAmount[challenged] =\n            totalChallengeAmount[challenged] -\n            amount;\n    }\n\n    function compareHands(\n        Hand challengerHand,\n        Hand opponentHand\n    ) private pure returns (Outcome) {\n        if (challengerHand == opponentHand) {\n            return Outcome.Draw;\n        } else if (\n            (challengerHand == Hand.Rock && opponentHand == Hand.Paper) ||\n            (challengerHand == Hand.Scissors && opponentHand == Hand.Rock) ||\n            (challengerHand == Hand.Paper && opponentHand == Hand.Scissors)\n        ) {\n            return Outcome.Opponent;\n        } else {\n            return Outcome.Challenger;\n        }\n    }\n\n    function allocateWinnings(\n        address winner,\n        address loser,\n        uint256 amount\n    ) private {\n        deposit[winner] = deposit[winner] + ((amount * 90) / 100);\n        deposit[loser] = deposit[loser] - amount;\n    }\n\n    function withdraw(\n        address withdrawer,\n        uint256 withdrawAmount\n    ) public payable nonReentrant {\n        if (withdrawAmount > deposit[withdrawer]) {\n            revert RockPaperScissors__WithdrawAmountCannotExceedDepositAmount(\n                msg.sender,\n                deposit[withdrawer],\n                withdrawAmount\n            );\n        }\n\n        deposit[withdrawer] = deposit[withdrawer] - withdrawAmount;\n        (bool callSuccess, ) = payable(withdrawer).call{value: withdrawAmount}(\n            \"\"\n        );\n\n        if (!callSuccess) {\n            revert RockPaperScissors__WithdrawFailed(withdrawer);\n        }\n        emit WithdrawalMade(withdrawer, withdrawAmount);\n    }\n\n    function challengedPlaysTheirHand(address challenged, Hand hand) public {\n        // check if you can use msg.sender instead\n        emit ChallengedPlaysHand(challenged, uint(hand));\n    }\n\n    function getDeposit(address player) public view returns (uint256) {\n        return deposit[player];\n    }\n\n    function getAmountActive(address player) public view returns (uint256) {\n        return totalChallengeAmount[player];\n    }\n\n    function getNumberOfActiveChallenges(\n        address player\n    ) public view returns (uint256) {\n        return numberOfChallengesOpened[player];\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}