{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/Convertor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary Convertor {\n    function getPrice(\n        AggregatorV3Interface aggregator\n    ) internal view returns (uint256) {\n        (, int256 answer, , , ) = aggregator.latestRoundData();\n        return uint256(answer * 10000000000);\n    }\n\n    function getConversionRate(\n        uint256 ethAmount,\n        AggregatorV3Interface aggregator\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(aggregator);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\n\n        return ethAmountInUsd;\n    }\n\n    function getEthAmount(\n        uint256 usdAmount,\n        AggregatorV3Interface aggregator\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(aggregator);\n\n        uint256 ethAmount = (usdAmount * 1000000000000000000) / ethPrice;\n        return ethAmount;\n    }\n}\n"
    },
    "contracts/RockPaperScissors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.17;\n\nimport \"./Convertor.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nerror RockPaperScissors__CannotAfford(\n    uint256 deposit,\n    uint256 amountReserved,\n    address player\n);\nerror RockPaperScissors__ChallengeCannotBeClosed(\n    uint256 challengeId,\n    address boldGuy\n);\nerror RockPaperScissors__ChallengeDoesNotExist(\n    uint256 challengeId,\n    address boldGuy\n);\nerror RockPaperScissors__ChallengeCannotBeAccepted(\n    uint256 challengeId,\n    address boldGuy\n);\nerror RockPaperScissors__WithdrawAmountCannotExceedDeposit(\n    address boldGuy,\n    uint256 depositAmount,\n    uint256 withdrawAmount\n);\nerror RockPaperScissors__UnreserveFundsToWithdrawAmount(\n    address withdrawer,\n    uint256 withdrawAmount\n);\nerror RockPaperScissors__WithdrawFailed(address withdrawer);\n\ncontract RockPaperScissors is ReentrancyGuard {\n    enum Hand {\n        Empty,\n        Rock,\n        Paper,\n        Scissors\n    }\n\n    enum Outcome {\n        None,\n        Draw,\n        Challenger,\n        Opponent\n    }\n\n    using Convertor for uint256;\n\n    uint256 public constant MINIMUM_BET_USD = 5;\n    uint256 public constant MINIMUM_DEPOSIT_USD = 5;\n    uint256 public constant CHALLENGE_OPEN_TAX_USD = 1; // change this\n\n    uint256 private challengeCounter;\n    AggregatorV3Interface private aggregator;\n\n    mapping(address => uint256) private deposit;\n    mapping(address => uint256) private reservedFunds;\n    mapping(uint256 => address[]) private challengeIdToPlayers;\n    mapping(uint256 => uint256) private challengeIdToAmount;\n\n    event DepositMade(address indexed depositor, uint256 amount);\n\n    event WithdrawalMade(address indexed withdrawer, uint256 amount);\n\n    // possibly add a slot for the opponent hand and fill it out later\n    event ChallengeOpened(\n        uint256 indexed challengeId,\n        address indexed challenger,\n        address indexed opponent,\n        uint256 amount,\n        uint256 hand\n    );\n\n    event ChallengeClosed(uint256 challengeId, address closer);\n\n    event ChallengeAccepted(uint256 challengeId, uint256 hand);\n\n    event ChallengedPlaysHand(uint256 challengeId, uint256 hand);\n\n    modifier isAmountAboveMinimum(uint256 amount, uint256 givenMinimum) {\n        if (amount.getConversionRate(aggregator) < givenMinimum) {\n            revert(\"Not enough ETH.\");\n        }\n        _;\n    }\n\n    modifier canAfford(uint256 amount) {\n        uint256 fundsReserved = getAmountActive(msg.sender);\n        uint256 depositMade = getDeposit(msg.sender);\n\n        if (fundsReserved + amount > depositMade) {\n            revert RockPaperScissors__CannotAfford(\n                depositMade,\n                fundsReserved + amount,\n                msg.sender\n            );\n        }\n        _;\n    }\n\n    modifier challengeExists(uint256 challengeId) {\n        if ((getPlayers(challengeId)).length == 0) {\n            revert RockPaperScissors__ChallengeDoesNotExist(\n                challengeId,\n                msg.sender\n            );\n        }\n        _;\n    }\n\n    constructor(uint256 counter, address priceFeed) {\n        challengeCounter = counter;\n        aggregator = AggregatorV3Interface(priceFeed);\n    }\n\n    function registerAndDeposit()\n        public\n        payable\n        nonReentrant\n        isAmountAboveMinimum(msg.value, MINIMUM_DEPOSIT_USD)\n    {\n        deposit[msg.sender] = getDeposit(msg.sender) + msg.value;\n\n        emit DepositMade(msg.sender, msg.value);\n    }\n\n    function openChallenge(\n        address opponent,\n        uint256 amount,\n        Hand hand\n    ) public isAmountAboveMinimum(amount, MINIMUM_BET_USD) canAfford(amount) {\n        challengeIdToAmount[challengeCounter] = amount;\n        challengeIdToPlayers[challengeCounter] = [msg.sender, opponent];\n\n        reservedFunds[msg.sender] = getAmountActive(msg.sender) + amount;\n\n        emit ChallengeOpened(\n            challengeCounter,\n            msg.sender,\n            opponent,\n            amount,\n            uint(hand)\n        );\n\n        challengeCounter++;\n    }\n\n    function acceptChallenge(\n        uint256 challengeId,\n        uint256 hand\n    )\n        public\n        challengeExists(challengeId)\n        canAfford(challengeIdToAmount[challengeId])\n    {\n        address challenged = challengeIdToPlayers[challengeId][1];\n        uint256 amount = challengeIdToAmount[challengeId];\n\n        if (msg.sender != challenged) {\n            revert RockPaperScissors__ChallengeCannotBeAccepted(\n                challengeId,\n                msg.sender\n            );\n        }\n\n        reservedFunds[challenged] = getAmountActive(challenged) + amount;\n\n        emit ChallengeAccepted(challengeId, hand);\n    }\n\n    function closeChallenge(\n        uint256 challengeId\n    ) public challengeExists(challengeId) {\n        address[] memory players = challengeIdToPlayers[challengeId];\n\n        if (msg.sender != players[0] && msg.sender != players[1]) {\n            revert RockPaperScissors__ChallengeCannotBeClosed(\n                challengeId,\n                msg.sender\n            );\n        }\n        address challenger = players[0];\n\n        reservedFunds[challenger] =\n            getAmountActive(challenger) -\n            challengeIdToAmount[challengeId];\n        deposit[challenger] = getDeposit(challenger) - getEthAmountOfTax(); // tax\n\n        emit ChallengeClosed(challengeId, msg.sender);\n        delete challengeIdToPlayers[challengeId]; // ?\n    }\n\n    function gameCommenced(\n        uint256 challengeId,\n        Hand challengerHand,\n        Hand challengedHand\n    ) public challengeExists(challengeId) {\n        uint256 amount = challengeIdToAmount[challengeId];\n        address challenger = challengeIdToPlayers[challengeId][0];\n        address challenged = challengeIdToPlayers[challengeId][1];\n\n        Outcome outcome = compareHands(challengerHand, challengedHand);\n\n        if (outcome == Outcome.Challenger) {\n            allocateWinnings(challenger, challenged, amount);\n        } else if (outcome == Outcome.Opponent) {\n            allocateWinnings(challenged, challenger, amount);\n        }\n\n        reservedFunds[challenger] = getAmountActive(challenger) - amount;\n        reservedFunds[challenged] = getAmountActive(challenged) - amount;\n\n        delete challengeIdToPlayers[challengeId];\n        delete challengeIdToAmount[challengeId];\n    }\n\n    function compareHands(\n        Hand challengerHand,\n        Hand opponentHand\n    ) private pure returns (Outcome) {\n        if (challengerHand == opponentHand) {\n            return Outcome.Draw;\n        } else if (\n            (challengerHand == Hand.Rock && opponentHand == Hand.Paper) ||\n            (challengerHand == Hand.Scissors && opponentHand == Hand.Rock) ||\n            (challengerHand == Hand.Paper && opponentHand == Hand.Scissors)\n        ) {\n            return Outcome.Opponent;\n        } else {\n            return Outcome.Challenger;\n        }\n    }\n\n    function allocateWinnings(\n        address winner,\n        address loser,\n        uint256 amount\n    ) private {\n        deposit[winner] = deposit[winner] + ((amount * 90) / 100);\n        deposit[loser] = deposit[loser] - amount;\n    }\n\n    function withdraw(uint256 withdrawAmount) public payable nonReentrant {\n        uint256 depositMade = deposit[msg.sender];\n\n        if (withdrawAmount > depositMade) {\n            revert RockPaperScissors__WithdrawAmountCannotExceedDeposit(\n                msg.sender,\n                depositMade,\n                withdrawAmount\n            );\n        }\n        if (withdrawAmount > depositMade - reservedFunds[msg.sender]) {\n            revert RockPaperScissors__UnreserveFundsToWithdrawAmount(\n                msg.sender,\n                withdrawAmount\n            );\n        }\n\n        deposit[msg.sender] = depositMade - withdrawAmount;\n        (bool callSuccess, ) = payable(msg.sender).call{value: withdrawAmount}(\n            \"\"\n        );\n\n        if (!callSuccess) {\n            revert RockPaperScissors__WithdrawFailed(msg.sender);\n        }\n        emit WithdrawalMade(msg.sender, withdrawAmount);\n    }\n\n    // function challengedPlaysTheirHand(uint256 challengeId, Hand hand) private {\n    //     emit ChallengedPlaysHand(challengeId, uint(hand));\n    // }\n\n    function getDeposit(address player) public view returns (uint256) {\n        return deposit[player];\n    }\n\n    function getAmountActive(address player) public view returns (uint256) {\n        return reservedFunds[player];\n    }\n\n    function getPlayers(\n        uint256 challengeId\n    ) public view returns (address[] memory) {\n        return challengeIdToPlayers[challengeId];\n    }\n\n    function getChallengeAmount(\n        uint256 challengeId\n    ) public view returns (uint256) {\n        return challengeIdToAmount[challengeId];\n    }\n\n    function getEthAmountOfTax() public view returns (uint256) {\n        return CHALLENGE_OPEN_TAX_USD.getEthAmount(aggregator);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}